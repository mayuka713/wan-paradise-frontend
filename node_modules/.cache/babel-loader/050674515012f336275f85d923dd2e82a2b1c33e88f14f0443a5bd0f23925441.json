{"ast":null,"code":"var _jsxFileName = \"/Users/hadamayuka/Desktop/wan_paradise/my-app/src/context/ReviewlContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from \"react\";\n\n// モーダルの状態を管理する型\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n// Context を作成\nconst ModalContext = /*#__PURE__*/createContext(undefined);\n\n// Provider コンポーネント\nexport const ModalProvider = ({\n  children\n}) => {\n  _s();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [storeName, setStoreName] = useState(\"\");\n  const openModal = name => {\n    setStoreName(name);\n    setIsModalOpen(true);\n  };\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setStoreName(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(ModalContext.Provider, {\n    value: {\n      isModalOpen,\n      openModal,\n      closeModal,\n      storeName\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n// Context を利用するためのカスタムフック\n_s(ModalProvider, \"JAwOwyOtQl8dFuv8oMbWES5QY7o=\");\n_c = ModalProvider;\nexport const useModal = () => {\n  _s2();\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error(\"useModal must be used within a ModalProvider\");\n  }\n  return context;\n};\n_s2(useModal, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ModalProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","ModalContext","undefined","ModalProvider","children","_s","isModalOpen","setIsModalOpen","storeName","setStoreName","openModal","name","closeModal","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useModal","_s2","context","Error","$RefreshReg$"],"sources":["/Users/hadamayuka/Desktop/wan_paradise/my-app/src/context/ReviewlContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from \"react\";\n\n// モーダルの状態を管理する型\ninterface ReviewContextType {\n  isModalOpen: boolean;\n  openModal: (storeName: string) => void;\n  closeModal: () => void;\n  storeName: string;\n}\n\n// Context を作成\nconst ModalContext = createContext<ReviewContextType | undefined>(undefined);\n\n// Provider コンポーネント\nexport const ModalProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [storeName, setStoreName] = useState(\"\");\n\n  const openModal = (name: string) => {\n    setStoreName(name);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setStoreName(\"\");\n  };\n\n  return (\n    <ModalContext.Provider value={{ isModalOpen, openModal, closeModal, storeName }}>\n      {children}\n    </ModalContext.Provider>\n  );\n};\n\n// Context を利用するためのカスタムフック\nexport const useModal = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error(\"useModal must be used within a ModalProvider\");\n  }\n  return context;\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAmB,OAAO;;AAE7E;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAQA;AACA,MAAMC,YAAY,gBAAGL,aAAa,CAAgCM,SAAS,CAAC;;AAE5E;AACA,OAAO,MAAMC,aAAgD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAChF,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGT,QAAQ,CAAC,KAAK,CAAC;EACrD,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE9C,MAAMY,SAAS,GAAIC,IAAY,IAAK;IAClCF,YAAY,CAACE,IAAI,CAAC;IAClBJ,cAAc,CAAC,IAAI,CAAC;EACtB,CAAC;EAED,MAAMK,UAAU,GAAGA,CAAA,KAAM;IACvBL,cAAc,CAAC,KAAK,CAAC;IACrBE,YAAY,CAAC,EAAE,CAAC;EAClB,CAAC;EAED,oBACET,OAAA,CAACC,YAAY,CAACY,QAAQ;IAACC,KAAK,EAAE;MAAER,WAAW;MAAEI,SAAS;MAAEE,UAAU;MAAEJ;IAAU,CAAE;IAAAJ,QAAA,EAC7EA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACY,CAAC;AAE5B,CAAC;;AAED;AAAAb,EAAA,CArBaF,aAAgD;AAAAgB,EAAA,GAAhDhB,aAAgD;AAsB7D,OAAO,MAAMiB,QAAQ,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC5B,MAAMC,OAAO,GAAGzB,UAAU,CAACI,YAAY,CAAC;EACxC,IAAI,CAACqB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,8CAA8C,CAAC;EACjE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,QAAQ;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}