{"ast":null,"code":"var _jsxFileName = \"/Users/hadamayuka/Desktop/wan_paradise/my-app/src/pages/Dogrun/DogRunStoreList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst DogRunStoreList = () => {\n  _s();\n  const {\n    prefectureId\n  } = useParams();\n  const [Store, setStore] = useState([]); // 初期値を空配列に設定\n  const [selectedPrefecture, setSelectedPrefecture] = useState(\"\");\n  useEffect(() => {\n    // データを取得する関数\n    const fetchStore = async () => {\n      try {\n        const response = await fetch(`http://localhost:5003/stores/list/${prefectureId}`);\n        const data = await response.json();\n        console.log(\"取得したデータ:\", data); // デバッグ用\n\n        // `data`が配列であることを確認\n        if (Array.isArray(data)) {\n          setStore(data);\n        } else {\n          console.error(\"APIのレスポンス形式が想定外です\");\n          setStore([]); // エラー時は空配列を設定\n        }\n      } catch (error) {\n        console.error(\"データ取得に失敗しました:\", error);\n        setStore([]); // エラー時は空配列を設定\n      }\n    };\n    fetchStore();\n  }, [prefectureId]);\n  useEffect(() => {\n    // 都道府県名を設定\n    const prefectureNames = {\n      \"1\": \"北海道\",\n      \"13\": \"東京\",\n      \"14\": \"神奈川\",\n      \"23\": \"愛知\",\n      \"26\": \"京都\",\n      \"27\": \"大阪\",\n      \"28\": \"兵庫\"\n    };\n    setSelectedPrefecture(prefectureNames[prefectureId !== null && prefectureId !== void 0 ? prefectureId : \"\"] || \"ドッグラン情報がありません\");\n  }, [prefectureId]);\n\n  // `Store`が配列でない場合を安全に処理\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      textAlign: \"center\",\n      padding: \"20px\",\n      backgroundColor: \"#FAF3E0\"\n    },\n    children: selectedPrefecture !== \"ドッグラン情報がありません\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [selectedPrefecture, \"\\u306E\\u30C9\\u30C3\\u30B0\\u30E9\\u30F3\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 11\n      }, this), Array.isArray(Store) && Store.length > 0 ? Store.map(store => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: \"20px\"\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: store.store_img,\n          alt: store.store_name,\n          style: {\n            width: \"400px\",\n            height: \"300px\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: \"\\u5F15\\u7528\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n          children: store.store_name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: store.store_description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"\\u4F4F\\u6240: \", store.store_address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n          href: store.store_url,\n          target: \"_blank\",\n          rel: \"noopener noreferrer\",\n          children: \"URL\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 17\n        }, this)]\n      }, store.store_id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 15\n      }, this)) : /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"\\u5E97\\u8217\\u60C5\\u5831\\u304C\\u898B\\u3064\\u304B\\u308A\\u307E\\u305B\\u3093\\u3067\\u3057\\u305F\\u3002\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"\\u30C9\\u30C3\\u30B0\\u30E9\\u30F3\\u60C5\\u5831\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n};\n_s(DogRunStoreList, \"TwtF/rDimuZ+62ntMrz1piGVTEA=\", false, function () {\n  return [useParams];\n});\n_c = DogRunStoreList;\nexport default DogRunStoreList;\nvar _c;\n$RefreshReg$(_c, \"DogRunStoreList\");","map":{"version":3,"names":["React","useEffect","useState","useParams","jsxDEV","_jsxDEV","Fragment","_Fragment","DogRunStoreList","_s","prefectureId","Store","setStore","selectedPrefecture","setSelectedPrefecture","fetchStore","response","fetch","data","json","console","log","Array","isArray","error","prefectureNames","style","textAlign","padding","backgroundColor","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","store","marginBottom","src","store_img","alt","store_name","width","height","store_description","store_address","href","store_url","target","rel","store_id","_c","$RefreshReg$"],"sources":["/Users/hadamayuka/Desktop/wan_paradise/my-app/src/pages/Dogrun/DogRunStoreList.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\ninterface Store {\n  store_id: number;\n  store_name: string;\n  store_description: string;\n  store_address: string;\n  store_phone: number;\n  store_url: string;\n  store_img: string;\n}\n\nconst DogRunStoreList: React.FC = () => {\n  const { prefectureId } = useParams<{ prefectureId: string }>();\n  const [Store, setStore] = useState<Store[]>([]); // 初期値を空配列に設定\n  const [selectedPrefecture, setSelectedPrefecture] = useState<string>(\"\");\n\n  useEffect(() => {\n    // データを取得する関数\n    const fetchStore = async () => {\n      try {\n        const response = await fetch(\n          `http://localhost:5003/stores/list/${prefectureId}`\n        );\n        const data = await response.json();\n        console.log(\"取得したデータ:\", data); // デバッグ用\n\n        // `data`が配列であることを確認\n        if (Array.isArray(data)) {\n          setStore(data);\n        } else {\n          console.error(\"APIのレスポンス形式が想定外です\");\n          setStore([]); // エラー時は空配列を設定\n        }\n      } catch (error) {\n        console.error(\"データ取得に失敗しました:\", error);\n        setStore([]); // エラー時は空配列を設定\n      }\n    };\n\n    fetchStore();\n  }, [prefectureId]);\n\n  useEffect(() => {\n    // 都道府県名を設定\n    const prefectureNames: { [key: string]: string } = {\n      \"1\": \"北海道\",\n      \"13\": \"東京\",\n      \"14\": \"神奈川\",\n      \"23\": \"愛知\",\n      \"26\": \"京都\",\n      \"27\": \"大阪\",\n      \"28\": \"兵庫\",\n    };\n    setSelectedPrefecture(\n      prefectureNames[prefectureId ?? \"\"] || \"ドッグラン情報がありません\"\n    );\n  }, [prefectureId]);\n\n  // `Store`が配列でない場合を安全に処理\n  return (\n    <div style={{ textAlign: \"center\", padding: \"20px\", backgroundColor: \"#FAF3E0\" }}>\n      {selectedPrefecture !== \"ドッグラン情報がありません\" ? (\n        <>\n          <h2>{selectedPrefecture}のドッグラン</h2>\n          {Array.isArray(Store) && Store.length > 0 ? (\n            Store.map((store) => (\n              <div key={store.store_id} style={{ marginBottom: \"20px\" }}>\n                <img\n                  src={store.store_img}\n                  alt={store.store_name}\n                  style={{ width: \"400px\", height: \"300px\" }}\n                />\n                <p>引用</p>\n                <h3>{store.store_name}</h3>\n                <p>{store.store_description}</p>\n                <p>住所: {store.store_address}</p>\n                <br />\n                <a\n                  href={store.store_url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  URL\n                </a>\n              </div>\n            ))\n          ) : (\n            <p>店舗情報が見つかりませんでした。</p>\n          )}\n        </>\n      ) : (\n        <h2>ドッグラン情報がありません</h2>\n      )}\n    </div>\n  );\n};\n\nexport default DogRunStoreList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}