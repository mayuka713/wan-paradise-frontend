{"ast":null,"code":"var _jsxFileName = \"/Users/hadamayuka/Desktop/wan_paradise/my-app/src/pages/Dogcafe/DogCafeRegionList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DogCafeRegionList = () => {\n  _s();\n  const navigate = useNavigate();\n  const [prefectures, setPrefectures] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  useEffect(() => {\n    const fetchPrefectures = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5003/prefectures\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch prefectures\");\n        }\n        const data = await response.json();\n        setPrefectures(data);\n      } catch (error) {\n        console.error(\"データの取得に失敗しました:\", error);\n      }\n    };\n    fetchPrefectures();\n  }, []);\n  const handleClick = id => {\n    navigate(`/dogcafe/${id}`);\n  };\n\n  // 地方ごとに都道府県を分類\n  const regions = prefectures.reduce((acc, prefecture) => {\n    if (!acc[prefecture.region]) {\n      acc[prefecture.region] = [];\n    }\n    acc[prefecture.region].push(prefecture);\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"DogCafe\\u3092\\u63A2\\u3059\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: Object.keys(regions).map(region => /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: region\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: regions[region].map(pref => /*#__PURE__*/_jsxDEV(\"span\", {\n            onClick: () => handleClick(pref.id),\n            style: {\n              cursor: 'pointer',\n              color: pref.name === '東京' ? 'green' : 'black',\n              marginRight: '10px'\n            },\n            children: pref.name\n          }, pref.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 54,\n          columnNumber: 13\n        }, this)]\n      }, region, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n};\n_s(DogCafeRegionList, \"Fdm49PjSOB+KljL3+WPzpBAWCzA=\", false, function () {\n  return [useNavigate];\n});\n_c = DogCafeRegionList;\nexport default DogCafeRegionList;\nvar _c;\n$RefreshReg$(_c, \"DogCafeRegionList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","DogCafeRegionList","_s","navigate","prefectures","setPrefectures","loading","setLoading","error","setError","fetchPrefectures","response","fetch","ok","Error","data","json","console","handleClick","id","regions","reduce","acc","prefecture","region","push","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","pref","onClick","style","cursor","color","name","marginRight","_c","$RefreshReg$"],"sources":["/Users/hadamayuka/Desktop/wan_paradise/my-app/src/pages/Dogcafe/DogCafeRegionList.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\n\n\ninterface Prefecture {\n  id: number;\n  name: string;\n  region: string;\n}\n\nconst DogCafeRegionList: React.FC = () => {\n  const navigate = useNavigate();\n  const [prefectures, setPrefectures] = useState<Prefecture[]>([]); \n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    const fetchPrefectures = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5003/prefectures\"); \n        if (!response.ok) {\n          throw new Error(\"Failed to fetch prefectures\");\n        }\n        const data: Prefecture[] = await response.json();\n        setPrefectures(data);\n      } catch (error) {\n        console.error(\"データの取得に失敗しました:\", error);\n      }\n    };\n\n    fetchPrefectures();\n  }, []);\n\n  const handleClick = (id: number) => {\n    navigate(`/dogcafe/${id}`);\n  };\n\n  // 地方ごとに都道府県を分類\n  const regions = prefectures.reduce((acc: { [region: string]: Prefecture[] }, prefecture) => {\n    if (!acc[prefecture.region]) {\n      acc[prefecture.region] = [];\n    }\n    acc[prefecture.region].push(prefecture);\n    return acc;\n  }, {});\n\n  return (\n    <div>\n      <h2>DogCafeを探す</h2>\n      <div>\n        {Object.keys(regions).map((region) => (\n          <div key={region}>\n            <h3>{region}</h3>\n            <p>\n              {regions[region].map((pref) => (\n                <span\n                  key={pref.id}\n                  onClick={() => handleClick(pref.id)}\n                  style={{ \n                    cursor: 'pointer', \n                    color: pref.name === '東京' ? 'green' : 'black' ,\n                    marginRight: '10px',\n                  }}\n                >\n                  {pref.name}\n                </span>\n              ))}\n            </p>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default DogCafeRegionList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}