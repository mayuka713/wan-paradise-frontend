{"ast":null,"code":"var _jsxFileName = \"/Users/hadamayuka/Desktop/wan_paradise/my-app/src/pages/Dogrun/DogRunStoreList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst isTag = item => {\n  return typeof item === \"object\" && item !== null && \"id\" in item && \"name\" in item && typeof item.id === \"number\" && typeof item.name === \"string\";\n};\nconst DogRunStoreList = () => {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [tags, setTags] = useState([]);\n  useEffect(() => {\n    const fetchTags = async () => {\n      setLoading(true);\n      setError(null);\n      try {\n        const response = await fetch(\"http://localhost:5003/tags\");\n        const data = await response.json();\n        if (Array.isArray(data) && data.every(isTag)) {\n          setTags(data);\n        } else {\n          throw new Error(\"タグ情報の形式が不正です。\");\n        }\n      } catch (error) {\n        console.error(\"タグの情報の取得に失敗しました:\", error);\n        setError(error instanceof Error ? error.message : \"不明なエラーが発生しました。\");\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchTags();\n  }, []);\n  if (loading) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 51,\n    columnNumber: 23\n  }, this);\n  if (error) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [\"Error: \", error]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 21\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: tags.map(tag => /*#__PURE__*/_jsxDEV(\"div\", {\n      children: tag.name\n    }, tag.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n_s(DogRunStoreList, \"2XB26SWyVt45avVqUqUg24x08po=\");\n_c = DogRunStoreList;\nexport default DogRunStoreList;\nvar _c;\n$RefreshReg$(_c, \"DogRunStoreList\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","isTag","item","id","name","DogRunStoreList","_s","loading","setLoading","error","setError","tags","setTags","fetchTags","response","fetch","data","json","Array","isArray","every","Error","console","message","children","fileName","_jsxFileName","lineNumber","columnNumber","map","tag","_c","$RefreshReg$"],"sources":["/Users/hadamayuka/Desktop/wan_paradise/my-app/src/pages/Dogrun/DogRunStoreList.tsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n\ninterface Tag {\n  id: number;\n  name: string;\n}\n\nconst isTag = (item: unknown): item is Tag => {\n  return (\n    typeof item === \"object\" &&\n    item !== null &&\n    \"id\" in item &&\n    \"name\" in item &&\n    typeof (item as Tag).id === \"number\" &&\n    typeof (item as Tag).name === \"string\"\n  );\n};\n\nconst DogRunStoreList = () => {\n  const [loading, setLoading] = useState<boolean>(false);\n  const [error, setError] = useState<string | null>(null);\n  const [tags, setTags] = useState<Tag[]>([]);\n\n  useEffect(() => {\n    const fetchTags = async () => {\n      setLoading(true);\n      setError(null);\n\n      try {\n        const response = await fetch(\"http://localhost:5003/tags\");\n        const data: unknown = await response.json();\n\n        if (Array.isArray(data) && data.every(isTag)) {\n          setTags(data as Tag[]);\n        } else {\n          throw new Error(\"タグ情報の形式が不正です。\");\n        }\n      } catch (error: unknown) {\n        console.error(\"タグの情報の取得に失敗しました:\", error);\n        setError(\n          error instanceof Error ? error.message : \"不明なエラーが発生しました。\"\n        );\n      } finally {\n        setLoading(false);\n      }\n    };\n\n    fetchTags();\n  }, []);\n\n  if (loading) return <div>Loading...</div>;\n  if (error) return <div>Error: {error}</div>;\n\n  return (\n    <div>\n      {tags.map((tag) => (\n        <div key={tag.id}>{tag.name}</div>\n      ))}\n    </div>\n  );\n};\n\nexport default DogRunStoreList;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAOnD,MAAMC,KAAK,GAAIC,IAAa,IAAkB;EAC5C,OACE,OAAOA,IAAI,KAAK,QAAQ,IACxBA,IAAI,KAAK,IAAI,IACb,IAAI,IAAIA,IAAI,IACZ,MAAM,IAAIA,IAAI,IACd,OAAQA,IAAI,CAASC,EAAE,KAAK,QAAQ,IACpC,OAAQD,IAAI,CAASE,IAAI,KAAK,QAAQ;AAE1C,CAAC;AAED,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC5B,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAU,KAAK,CAAC;EACtD,MAAM,CAACY,KAAK,EAAEC,QAAQ,CAAC,GAAGb,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAM,CAACc,IAAI,EAAEC,OAAO,CAAC,GAAGf,QAAQ,CAAQ,EAAE,CAAC;EAE3CC,SAAS,CAAC,MAAM;IACd,MAAMe,SAAS,GAAG,MAAAA,CAAA,KAAY;MAC5BL,UAAU,CAAC,IAAI,CAAC;MAChBE,QAAQ,CAAC,IAAI,CAAC;MAEd,IAAI;QACF,MAAMI,QAAQ,GAAG,MAAMC,KAAK,CAAC,4BAA4B,CAAC;QAC1D,MAAMC,IAAa,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QAE3C,IAAIC,KAAK,CAACC,OAAO,CAACH,IAAI,CAAC,IAAIA,IAAI,CAACI,KAAK,CAACnB,KAAK,CAAC,EAAE;UAC5CW,OAAO,CAACI,IAAa,CAAC;QACxB,CAAC,MAAM;UACL,MAAM,IAAIK,KAAK,CAAC,eAAe,CAAC;QAClC;MACF,CAAC,CAAC,OAAOZ,KAAc,EAAE;QACvBa,OAAO,CAACb,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;QACxCC,QAAQ,CACND,KAAK,YAAYY,KAAK,GAAGZ,KAAK,CAACc,OAAO,GAAG,gBAC3C,CAAC;MACH,CAAC,SAAS;QACRf,UAAU,CAAC,KAAK,CAAC;MACnB;IACF,CAAC;IAEDK,SAAS,CAAC,CAAC;EACb,CAAC,EAAE,EAAE,CAAC;EAEN,IAAIN,OAAO,EAAE,oBAAOP,OAAA;IAAAwB,QAAA,EAAK;EAAU;IAAAC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAK,CAAC;EACzC,IAAInB,KAAK,EAAE,oBAAOT,OAAA;IAAAwB,QAAA,GAAK,SAAO,EAACf,KAAK;EAAA;IAAAgB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAM,CAAC;EAE3C,oBACE5B,OAAA;IAAAwB,QAAA,EACGb,IAAI,CAACkB,GAAG,CAAEC,GAAG,iBACZ9B,OAAA;MAAAwB,QAAA,EAAmBM,GAAG,CAAC1B;IAAI,GAAjB0B,GAAG,CAAC3B,EAAE;MAAAsB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAiB,CAClC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACtB,EAAA,CA1CID,eAAe;AAAA0B,EAAA,GAAf1B,eAAe;AA4CrB,eAAeA,eAAe;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}