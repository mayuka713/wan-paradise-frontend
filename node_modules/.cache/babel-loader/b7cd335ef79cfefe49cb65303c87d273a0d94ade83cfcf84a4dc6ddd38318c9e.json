{"ast":null,"code":"var _jsxFileName = \"/Users/hadamayuka/Desktop/wan_paradise/my-app/src/components/StoresList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\n\n// データの型を定義\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst StoresList = () => {\n  _s();\n  const [stores, setStores] = useState([]); // APIから取得したデータを保存するためのステート\n  useEffect(() => {\n    // APIを呼び出してデータを取得\n    fetch(\"http://localhost:5003/stores\").then(response => response.json()) // JSON形式でレスポンスを取得\n    .then(data => {\n      // データの型を明示的に指定\n      setStores(data); // 取得したデータをステートに保存\n    }).catch(error => {\n      console.error(\"エラーが発生しました\", error); // エラーハンドリング\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\u30C9\\u30C3\\u30B0\\u30E9\\u30F3\\u4E00\\u89A7\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }, this), stores.length > 0 ? /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: stores.map(store => /*#__PURE__*/_jsxDEV(\"button\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: store.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: store.description\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: store.address\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this)]\n      }, store.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"\\u30C7\\u30FC\\u30BF\\u304C\\u3042\\u308A\\u307E\\u305B\\u3093\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(StoresList, \"9eWA3iE2Dz5ReR9eY7oAKBm8LZY=\");\n_c = StoresList;\nexport default StoresList;\nvar _c;\n$RefreshReg$(_c, \"StoresList\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","StoresList","_s","stores","setStores","fetch","then","response","json","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","length","map","store","name","description","address","id","_c","$RefreshReg$"],"sources":["/Users/hadamayuka/Desktop/wan_paradise/my-app/src/components/StoresList.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\n\n\n// データの型を定義\ntype Store = {\n  id: number;\n  name: string;\n  description: string;\n  address: string;\n};\n\nconst StoresList: React.FC = () => {\n\n  const [stores, setStores] = useState<Store[]>([]);   // APIから取得したデータを保存するためのステート\n  useEffect(() => {\n    // APIを呼び出してデータを取得\n    fetch(\"http://localhost:5003/stores\")\n      .then((response) => response.json()) // JSON形式でレスポンスを取得\n      .then((data: Store[]) => { // データの型を明示的に指定\n        setStores(data); // 取得したデータをステートに保存\n      })\n      .catch((error) => {\n        console.error(\"エラーが発生しました\", error); // エラーハンドリング\n      });\n  }, []);\n\n  return (\n    <>\n    <h1>ドッグラン一覧</h1>\n    {stores.length > 0 ? (\n      <ul>\n        {stores.map((store) => (\n          <button key={store.id}>\n            <h2>{store.name}</h2>\n            <p>{store.description}</p>\n            <p>{store.address}</p>\n            </button>\n        ))}\n      </ul>\n      \n    ):(\n      <p>データがありません</p>\n    )}\n    </>\n  );\n};\n\nexport default StoresList;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;;AAGlD;AAAA,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAQA,MAAMC,UAAoB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAEjC,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAU,EAAE,CAAC,CAAC,CAAG;EACrDD,SAAS,CAAC,MAAM;IACd;IACAU,KAAK,CAAC,8BAA8B,CAAC,CAClCC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CACpCF,IAAI,CAAEG,IAAa,IAAK;MAAE;MACzBL,SAAS,CAACK,IAAI,CAAC,CAAC,CAAC;IACnB,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC,CAAC,CAAC;IACtC,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEb,OAAA,CAAAE,SAAA;IAAAa,QAAA,gBACAf,OAAA;MAAAe,QAAA,EAAI;IAAO;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACfd,MAAM,CAACe,MAAM,GAAG,CAAC,gBAChBpB,OAAA;MAAAe,QAAA,EACGV,MAAM,CAACgB,GAAG,CAAEC,KAAK,iBAChBtB,OAAA;QAAAe,QAAA,gBACEf,OAAA;UAAAe,QAAA,EAAKO,KAAK,CAACC;QAAI;UAAAP,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACrBnB,OAAA;UAAAe,QAAA,EAAIO,KAAK,CAACE;QAAW;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAC1BnB,OAAA;UAAAe,QAAA,EAAIO,KAAK,CAACG;QAAO;UAAAT,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAHXG,KAAK,CAACI,EAAE;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIX,CACX;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,gBAGLnB,OAAA;MAAAe,QAAA,EAAG;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAChB;EAAA,eACC,CAAC;AAEP,CAAC;AAACf,EAAA,CAlCID,UAAoB;AAAAwB,EAAA,GAApBxB,UAAoB;AAoC1B,eAAeA,UAAU;AAAC,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}