{"ast":null,"code":"import React,{createContext,useContext,useState}from\"react\";// モーダルの状態を管理する型\nimport{jsx as _jsx}from\"react/jsx-runtime\";// Context を作成\nconst ModalContext=/*#__PURE__*/createContext(undefined);// Provider コンポーネント\nexport const ModalProvider=_ref=>{let{children}=_ref;const[isModalOpen,setIsModalOpen]=useState(false);const[storeName,setStoreName]=useState(\"\");const openModal=name=>{setStoreName(name);setIsModalOpen(true);};const closeModal=()=>{setIsModalOpen(false);setStoreName(\"\");};return/*#__PURE__*/_jsx(ModalContext.Provider,{value:{isModalOpen,openModal,closeModal,storeName},children:children});};// Context を利用するためのカスタムフック\nexport const useModal=()=>{const context=useContext(ModalContext);if(!context){throw new Error(\"useModal must be used within a ModalProvider\");}return context;};","map":{"version":3,"names":["React","createContext","useContext","useState","jsx","_jsx","ModalContext","undefined","ModalProvider","_ref","children","isModalOpen","setIsModalOpen","storeName","setStoreName","openModal","name","closeModal","Provider","value","useModal","context","Error"],"sources":["/Users/hadamayuka/Desktop/wan_paradise/my-app/src/context/ModalContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, ReactNode } from \"react\";\n\n// モーダルの状態を管理する型\ninterface ModalContextType {\n  isModalOpen: boolean;\n  openModal: (storeName: string) => void;\n  closeModal: () => void\n  storeName: string;\n}\n\n// Context を作成\nconst ModalContext = createContext<ModalContextType | undefined>(undefined);\n\n// Provider コンポーネント\nexport const ModalProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [storeName, setStoreName] = useState(\"\");\n\n  const openModal = (name: string) => {\n    setStoreName(name);\n    setIsModalOpen(true);\n  };\n\n  const closeModal = () => {\n    setIsModalOpen(false);\n    setStoreName(\"\");\n  };\n\n  return (\n    <ModalContext.Provider value={{ isModalOpen, openModal, closeModal, storeName }}>\n      {children}\n    </ModalContext.Provider>\n  );\n};\n\n// Context を利用するためのカスタムフック\nexport const useModal = () => {\n  const context = useContext(ModalContext);\n  if (!context) {\n    throw new Error(\"useModal must be used within a ModalProvider\");\n  }\n  return context;\n};\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,KAAmB,OAAO,CAE7E;AAAA,OAAAC,GAAA,IAAAC,IAAA,yBAQA;AACA,KAAM,CAAAC,YAAY,cAAGL,aAAa,CAA+BM,SAAS,CAAC,CAE3E;AACA,MAAO,MAAM,CAAAC,aAAgD,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC3E,KAAM,CAACE,WAAW,CAAEC,cAAc,CAAC,CAAGT,QAAQ,CAAC,KAAK,CAAC,CACrD,KAAM,CAACU,SAAS,CAAEC,YAAY,CAAC,CAAGX,QAAQ,CAAC,EAAE,CAAC,CAE9C,KAAM,CAAAY,SAAS,CAAIC,IAAY,EAAK,CAClCF,YAAY,CAACE,IAAI,CAAC,CAClBJ,cAAc,CAAC,IAAI,CAAC,CACtB,CAAC,CAED,KAAM,CAAAK,UAAU,CAAGA,CAAA,GAAM,CACvBL,cAAc,CAAC,KAAK,CAAC,CACrBE,YAAY,CAAC,EAAE,CAAC,CAClB,CAAC,CAED,mBACET,IAAA,CAACC,YAAY,CAACY,QAAQ,EAACC,KAAK,CAAE,CAAER,WAAW,CAAEI,SAAS,CAAEE,UAAU,CAAEJ,SAAU,CAAE,CAAAH,QAAA,CAC7EA,QAAQ,CACY,CAAC,CAE5B,CAAC,CAED;AACA,MAAO,MAAM,CAAAU,QAAQ,CAAGA,CAAA,GAAM,CAC5B,KAAM,CAAAC,OAAO,CAAGnB,UAAU,CAACI,YAAY,CAAC,CACxC,GAAI,CAACe,OAAO,CAAE,CACZ,KAAM,IAAI,CAAAC,KAAK,CAAC,8CAA8C,CAAC,CACjE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}