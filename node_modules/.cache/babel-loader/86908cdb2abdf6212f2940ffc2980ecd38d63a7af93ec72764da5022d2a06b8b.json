{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\nconst HospitalStoreList = () => {\n  _s();\n  const {\n    prefectureId\n  } = useParams(); // URLのパラメータから都道府県IDを取得する\n\n  const [stores, setStores] = useState([]); // 病院リストの状態を定義する\n  const [hospitalTags, setHospitalTags] = useState([]); //タグ情報の状態を定義する\n  const [selectedHospitalTags, setSelectedHospitalTagIds] = useState([]); // 選択されたタグのID\n  const [selectedPrefecture, setSelectedPrefecture] = useState(\"\");\n\n  // タグデータの取得\n  useEffect(() => {\n    const fetchHospitalTags = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5003/hospital-tags\"); // タグデータを取得\n        const data = await response.json();\n        setHospitalTags(data); // 取得したデータを状態に設定\n      } catch (error) {\n        console.error(\"タグデータの取得に失敗しました:\", error);\n      }\n    };\n    fetchHospitalTags();\n  }, []);\n\n  //病院データの取得\n  const filteredHospitalStores = stores.filter(store => selectedHospitalTagIds.length === 0 ? true : store.tags.some(tag => selectedHospitalTagIds.includes(tag.id)));\n};\n_s(HospitalStoreList, \"8kTakXoJDX75/o4EiMaX0yGXi10=\", false, function () {\n  return [useParams];\n});\n_c = HospitalStoreList;\nexport default HospitalStoreList;\nvar _c;\n$RefreshReg$(_c, \"HospitalStoreList\");","map":{"version":3,"names":["useEffect","useState","useParams","HospitalStoreList","_s","prefectureId","stores","setStores","hospitalTags","setHospitalTags","selectedHospitalTags","setSelectedHospitalTagIds","selectedPrefecture","setSelectedPrefecture","fetchHospitalTags","response","fetch","data","json","error","console","filteredHospitalStores","filter","store","selectedHospitalTagIds","length","tags","some","tag","includes","id","_c","$RefreshReg$"],"sources":["/Users/hadamayuka/Desktop/wan_paradise/my-app/src/pages/Hospital/HospitalStoreList.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useParams } from \"react-router-dom\";\n\ninterface Hospital {\n  store_id: number;\n  store_name: string;\n  store_description: string;\n  store_address: string;\n  store_phone: number;\n  store_url: string;\n  store_img: string;\n  tags: {id: number; name: string}[];\n}\n\ninterface HospitalTag {\n  id: number;\n  name: string;\n}\n\n  const HospitalStoreList = () => {\n  const { prefectureId } = useParams<{ prefectureId: string }>(); // URLのパラメータから都道府県IDを取得する\n  \n  const [stores, setStores] = useState<Hospital[]>([]);// 病院リストの状態を定義する\n  const [hospitalTags, setHospitalTags] = useState<HospitalTag[]>([]); //タグ情報の状態を定義する\n  const [selectedHospitalTags, setSelectedHospitalTagIds] = useState<number[]>([]); // 選択されたタグのID\n  const [ selectedPrefecture, setSelectedPrefecture] = useState<string>(\"\");\n \n\n // タグデータの取得\n useEffect(() => {\n  const fetchHospitalTags = async () => {\n    try {\n      const response = await fetch(\"http://localhost:5003/hospital-tags\"); // タグデータを取得\n      const data: HospitalTag[] = await response.json();\n      setHospitalTags(data); // 取得したデータを状態に設定\n    } catch (error) {\n      console.error(\"タグデータの取得に失敗しました:\", error);\n    }\n  };\n  fetchHospitalTags();\n}, []);\n\n//病院データの取得\n   const filteredHospitalStores = stores.filter((store) => \n    selectedHospitalTagIds.length === 0 \n    ? true \n    : store.tags.some((tag) => selectedHospitalTagIds.includes(tag.id))\n    );\n  }\n  \n\n\n\n\n\nexport default HospitalStoreList;\n"],"mappings":";AAAA,SAAgBA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,SAAS,QAAQ,kBAAkB;AAkB1C,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAChC,MAAM;IAAEC;EAAa,CAAC,GAAGH,SAAS,CAA2B,CAAC,CAAC,CAAC;;EAEhE,MAAM,CAACI,MAAM,EAAEC,SAAS,CAAC,GAAGN,QAAQ,CAAa,EAAE,CAAC,CAAC;EACrD,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAgB,EAAE,CAAC,CAAC,CAAC;EACrE,MAAM,CAACS,oBAAoB,EAAEC,yBAAyB,CAAC,GAAGV,QAAQ,CAAW,EAAE,CAAC,CAAC,CAAC;EAClF,MAAM,CAAEW,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGZ,QAAQ,CAAS,EAAE,CAAC;;EAG1E;EACAD,SAAS,CAAC,MAAM;IACf,MAAMc,iBAAiB,GAAG,MAAAA,CAAA,KAAY;MACpC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,qCAAqC,CAAC,CAAC,CAAC;QACrE,MAAMC,IAAmB,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;QACjDT,eAAe,CAACQ,IAAI,CAAC,CAAC,CAAC;MACzB,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC1C;IACF,CAAC;IACDL,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;;EAEN;EACG,MAAMO,sBAAsB,GAAGf,MAAM,CAACgB,MAAM,CAAEC,KAAK,IAClDC,sBAAsB,CAACC,MAAM,KAAK,CAAC,GACjC,IAAI,GACJF,KAAK,CAACG,IAAI,CAACC,IAAI,CAAEC,GAAG,IAAKJ,sBAAsB,CAACK,QAAQ,CAACD,GAAG,CAACE,EAAE,CAAC,CAClE,CAAC;AACH,CAAC;AAAA1B,EAAA,CA7BKD,iBAAiB;EAAA,QACED,SAAS;AAAA;AAAA6B,EAAA,GAD5B5B,iBAAiB;AAoCzB,eAAeA,iBAAiB;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}