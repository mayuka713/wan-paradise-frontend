{"ast":null,"code":"var _jsxFileName = \"/Users/hadamayuka/Desktop/wan_paradise/my-app/src/pages/Dogrun/DogrunRegionList.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./DogRunRegionList.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DogrunRegionList = () => {\n  _s();\n  const navigate = useNavigate();\n  const [prefectures, setPrefectures] = useState([]);\n  useEffect(() => {\n    const fetchPrefectures = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5003/prefectures/\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch prefectures\");\n        }\n        const data = await response.json();\n        setPrefectures(data);\n      } catch (error) {\n        console.error(\"データの取得に失敗しました:\", error);\n      }\n    };\n    fetchPrefectures();\n  }, []);\n  const handleClick = id => {\n    navigate(`/dogrun/${id}`);\n  };\n  const regions = prefectures.reduce((acc, prefecture) => {\n    if (!acc[prefecture.region]) {\n      acc[prefecture.region] = [];\n    }\n    acc[prefecture.region].push(prefecture);\n    return acc;\n  }, {});\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"region-list-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"region-list-title\",\n      children: \"DogRun\\u3092\\u63A2\\u3059\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"region-list-content\",\n      children: Object.keys(regions).map(region => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"region-section\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"region-title-dogcafe\",\n          children: region\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"prefecture-list\",\n          children: regions[region].map(pref => /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => handleClick(pref.id),\n            className: \"prefecture-button \",\n            children: pref.name\n          }, pref.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 54,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this)]\n      }, region, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(DogrunRegionList, \"nlt27A/kvAUPG03jdEYiCBZ4eBI=\", false, function () {\n  return [useNavigate];\n});\n_c = DogrunRegionList;\nexport default DogrunRegionList;\nvar _c;\n$RefreshReg$(_c, \"DogrunRegionList\");","map":{"version":3,"names":["React","useEffect","useState","useNavigate","jsxDEV","_jsxDEV","DogrunRegionList","_s","navigate","prefectures","setPrefectures","fetchPrefectures","response","fetch","ok","Error","data","json","error","console","handleClick","id","regions","reduce","acc","prefecture","region","push","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Object","keys","map","pref","onClick","name","_c","$RefreshReg$"],"sources":["/Users/hadamayuka/Desktop/wan_paradise/my-app/src/pages/Dogrun/DogrunRegionList.tsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport \"./DogRunRegionList.css\";\nimport HamburgerMenu from \"../../HamburgerMenu\";\n\ninterface Prefecture {\n  id: number;\n  name: string;\n  region: string;\n}\n\nconst DogrunRegionList: React.FC = () => {\n  const navigate = useNavigate();\n  const [prefectures, setPrefectures] = useState<Prefecture[]>([]);\n\n  useEffect(() => {\n    const fetchPrefectures = async () => {\n      try {\n        const response = await fetch(\"http://localhost:5003/prefectures/\");\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch prefectures\");\n        }\n        const data: Prefecture[] = await response.json();\n        setPrefectures(data);\n      } catch (error) {\n        console.error(\"データの取得に失敗しました:\", error);\n      }\n    };\n\n    fetchPrefectures();\n  }, []);\n\n  const handleClick = (id: number) => {\n    navigate(`/dogrun/${id}`);\n  };\n\n  const regions = prefectures.reduce((acc: { [region: string]: Prefecture[] }, prefecture) => {\n    if (!acc[prefecture.region]) {\n      acc[prefecture.region] = [];\n    }\n    acc[prefecture.region].push(prefecture);\n    return acc;\n  }, {});\n\n  return (\n    <div className=\"region-list-container\">\n      <h2 className=\"region-list-title\">DogRunを探す</h2>\n      <div className=\"region-list-content\">\n        {Object.keys(regions).map((region) => (\n          <div key={region} className=\"region-section\">\n            <h3 className=\"region-title-dogcafe\">{region}</h3>\n            <div className=\"prefecture-list\">\n              {regions[region].map((pref) => (\n                <button\n                  key={pref.id}\n                  onClick={() => handleClick(pref.id)}\n                  className= \"prefecture-button \"\n                >\n                  {pref.name}\n                </button>\n              ))}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default DogrunRegionList;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}